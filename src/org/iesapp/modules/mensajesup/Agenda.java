/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.iesapp.modules.mensajesup;

import java.util.ArrayList;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import org.iesapp.clients.sgd7.mensajes.BeanProfSms;
import org.iesapp.clients.sgd7.mensajes.MensajesListas;
import org.iesapp.clients.sgd7.mensajes.MensajesListasProfesores;
import org.iesapp.framework.table.MyCheckBoxRenderer;
import org.iesapp.framework.util.CoreCfg;

/**
 *
 * @author Josep
 */
public class Agenda extends javax.swing.JDialog {
    private final DefaultListModel modelList1;
    private DefaultTableModel modelTable1;
    private boolean listening;
    private final ArrayList<MensajesListas> mensajesListas;
    private final ArrayList<BeanProfSms> totalList;

    /**
     * Creates new form Agenda
     */
    public Agenda(java.awt.Frame parent, boolean modal, CoreCfg coreCfg) {
        super(parent, modal);
        initComponents();
        this.setIconImage(new ImageIcon(Agenda.class.getResource("/org/iesapp/modules/mensajesup/icons/list.png")).getImage());
        modelList1 = new DefaultListModel();
        jList1.setModel(modelList1);
        
        //List of profes
        totalList = coreCfg.getSgdClient().getProfesoresCollection().listProf();
        
        mensajesListas = coreCfg.getSgdClient().getMensajesCollection().getMensajesListas();
        for(MensajesListas ml: mensajesListas)
        {
            modelList1.addElement(ml.getNombre());
        }
        if(modelList1.getSize()>0)
        {
            jList1.setSelectedIndex(0);
        }
        
        jTable1.getModel().addTableModelListener(new TableModelListener(){
          

            @Override
            public void tableChanged(TableModelEvent e) {
                int row = jTable1.getSelectedRow();
                if(!listening || e.getColumn()!=1)
                {
                    return;
                }
                int idx  = jList1.getSelectedIndex();
                if(idx<0)
                {
                    return;
                }
                String idProfe = ((String) jTable1.getValueAt(row,0));
                boolean selected = (Boolean) jTable1.getValueAt(row,1);
                System.out.println("Modified : idProfe:"+idProfe+" - selection "+selected);
                ArrayList<MensajesListasProfesores> listProf = mensajesListas.get(idx).getListMensajesListasProfesores();
                //This teacher has been modified
                //try to update the status in the total bean
                for(BeanProfSms bean: totalList)
                {
                    if(bean.getCodigo().equals(idProfe))
                    {
                        bean.setSelected(selected);
                        break;
                    }
                }
                //try to retrieve its bean
                if(!selected)
                {
                    MensajesListasProfesores pointer = null;
                    for(MensajesListasProfesores mlp: listProf)
                    {
                        System.out.println("Comparing : idProfes:"+idProfe+ " vs "+mlp.getCodigo());
                        if(mlp.getCodigo().equals(idProfe))
                        {
                            System.out.println("trying to delete");
                            mlp.delete();
                            pointer = mlp; 
                            break;  
                        }                         
                        
                    }
                    
                    if(pointer!=null)
                    {
                        mensajesListas.get(idx).getListMensajesListasProfesores().remove(pointer);
                    }

                }
                else
                {
                    MensajesListasProfesores mlp = new MensajesListasProfesores();
                    mlp.setCodigo(idProfe);
                    mlp.setIdMensajesListas(mensajesListas.get(idx).getId());
                    mlp.save();
                    listProf.add(mlp);
                }
                updateTotals();
            }
            
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable(){
            public boolean isCellEditable(int row, int col)
            {
                return col==1;
            }
        };

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Llistes de missatges");

        jButton1.setText("+");
        jButton1.setToolTipText("Crea nova");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("-");
        jButton2.setToolTipText("Elimina");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jLabel1.setText("Llistes missatges");

        jLabel2.setText("Nom de la llista");

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText(" ");

        jLabel4.setText("Cerca");

        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField2KeyReleased(evt);
            }
        });

        modelTable1 = new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "id", "Selecciona", "Professor"
            }
        );
        jTable1.setModel(modelTable1);
        jScrollPane3.setViewportView(jTable1);
        jTable1.setRowHeight(32);
        JCheckBox checkbox = new JCheckBox();
        jTable1.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(checkbox));
        jTable1.getColumnModel().getColumn(1).setCellRenderer(new MyCheckBoxRenderer());
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(50);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(50);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(350);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(12, 12, 12)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1)
                            .addComponent(jTextField2))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jLabel1))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        int idx = jList1.getSelectedIndex();
        if(idx<0)
        {
            return;
        }
        modelList1.setElementAt(jTextField1.getText().trim(), idx);
        //Must update
        mensajesListas.get(idx).setNombre(jTextField1.getText().trim());
        mensajesListas.get(idx).save();
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jTextField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyReleased
        fillProfesList();
    }//GEN-LAST:event_jTextField2KeyReleased

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        if(jList1.getSelectedIndex()<0)
        {
            return;
        }
        jTextField2.setText("");
        jTextField1.setText(jList1.getSelectedValue().toString());
        fillProfesList();
        
    }//GEN-LAST:event_jList1ValueChanged

    //Create new list
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        MensajesListas ml = new MensajesListas();
        ml.setNombre("NEW LIST");
        ml.save();
        mensajesListas.add(ml);
        modelList1.addElement(ml.getNombre());
        jList1.setSelectedIndex(modelList1.getSize()-1);
    }//GEN-LAST:event_jButton1ActionPerformed

    //Remove list
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int idx =  jList1.getSelectedIndex();
        if(idx<0)
        {
            return;
        }
        int showConfirmDialog = JOptionPane.showConfirmDialog(this, "Segur que voleu esborrar la llista\n"+jList1.getSelectedValue()+"?", "Confirmació", JOptionPane.YES_NO_OPTION);
        if(showConfirmDialog==JOptionPane.YES_OPTION)
        {
            mensajesListas.get(idx).delete();
            modelList1.removeElementAt(idx);
            if(modelList1.getSize()>0)
            {
                jList1.setSelectedIndex(0);
            }
            else
            {
                jTextField1.setText("");
                jTextField2.setText("");
                while(jTable1.getRowCount()>0)
                {
                    modelTable1.removeRow(0);
                }
            }
                
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    private void fillProfesList() {
       
        int row = jList1.getSelectedIndex();
        if(row<0)
        {
            return;
        }
        listening = false;
   
        ArrayList<MensajesListasProfesores> listProf = mensajesListas.get(row).getListMensajesListasProfesores();
        //Aquesta es la llista dels professors seleccionats
        //Actualitza la llista de la taula
        for(BeanProfSms bpsms: totalList)
        {
            boolean contains = false;
            for(BeanProfSms tmp: listProf)
            {
                if(tmp.getCodigo().equals(bpsms.getCodigo()))
                {
                    contains = true;
                    break;
                }
            }
            bpsms.setSelected(contains);
        }
        
        while(jTable1.getRowCount()>0)
        {
            modelTable1.removeRow(0);
        }
        
        String search = jTextField2.getText().toUpperCase();
        for(BeanProfSms bean: totalList)
        {
            if(bean.getNombre()!=null && (bean.getNombre().toUpperCase().contains(search) || search.trim().isEmpty()))
            {
                 modelTable1.addRow(new Object[]{bean.getCodigo(),bean.isSelected(),bean.getNombre()});
            }
        }
        
        updateTotals();
        listening = true;
    }

    private void updateTotals() {
        int total = 0;
        for(BeanProfSms bean: totalList)
        {
            if(bean.isSelected())
            {
                total +=1;
            }
        }
        jLabel3.setText(total+" seleccionats");
    }

    
}
